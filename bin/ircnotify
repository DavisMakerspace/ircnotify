#!/usr/bin/env ruby

require 'cinch'
require 'socket'
require 'json'
require 'etc'

module IRCNotify
  extend self

  VERSION = %x{cd #{File.dirname $0} && git describe --dirty=-modified}.strip
  HOST = Socket.gethostbyname(Socket.gethostname).first
  @server = nil
  @known_irc_targets = {}

  config = ARGV.shift || File.join(File.dirname($0), "..", "etc", "config")
  if not File.exists? config
    puts "Can't find config file #{config}"
    puts "Either create it or specify another config file with: #{File.basename $0} [filename]"
    exit
  end
  load config
  load File.join(File.dirname($0), "..", "share", "config.schema")

  class Server
    def initialize
      if File.socket? IRCNotifyConfig::Server::PATH then File.delete IRCNotifyConfig::Server::PATH end
      @server = UNIXServer.new IRCNotifyConfig::Server::PATH
      @clients = []
    end
    def start 
      while socket = @server.accept do
        client = IRCNotify::Client.new socket
        Thread.new do
          @clients << client
          begin
            client.start_read
          rescue StandardError => error
            IRCNotify.debug "Client error: #{error}"
          end
          @clients.delete client
        end
      end
    end
    def stop
      path = @server.path
      @server.shutdown
      @server = nil
      File.delete path
    end
    def send(at, from, cmd)
      trigger, msg = cmd.split ' ', 2
      if trigger
        @clients.each do |c| c.send at, from, trigger, msg end
      else
        at.msg "ircnotify #{VERSION} listening on #{HOST}:#{@server.path}"
      end
    end
    def path
      @server.path
    end
  end

  class Client
    def initialize(socket)
      @socket = socket
      @peername = Etc.getpwuid(@socket.getpeereid[0]).name
      @name = @peername
      @triggers = []
      @targets = nil
      IRCNotify.info "New connection #{@socket} by #{@peername}"
    end
    def start_read
      @socket.each do |line|
        IRCNotify.debug "Client #{@socket} got: #{line.strip}"
        cmds = {}
        if line.start_with? "{"
          begin
            cmds = JSON::parse line
          rescue JSON::ParserError => error
            IRCNotify.debug "Could not parse presumed JSON string: #{line}"
            IRCNotify.debug "got error #{error}"
            cmds = {}
          end
        else
          cmds['send'] = line.strip
        end
        handle_commands cmds
      end
      IRCNotify.info "Ending connection #{@socket}"
      @socket = nil
    end
    def send at, from, trigger, msg
      if @triggers.include? trigger
        data = {
          at: at.object_id,
          at_name: at.name,
          from: from.object_id,
          from_name: from.name,
          trigger: trigger,
          msg: msg}
        @socket.write(data.to_json + "\r\n")
      end
    end
    def handle_commands(cmds)
      @name = cmds['set_name'].to_s if cmds['set_name']
      if cmds['set_targets'] then @targets = Array.try_convert cmds['set_targets'] || nil end
      targets = Array.try_convert cmds['targets'] || @targets
      if cmds['set_triggers'] then @triggers = Array.try_convert cmds['set_triggers'] || [] end
      if cmds['send'] then IRCNotify.irc_send targets, @name, cmds['send'] end
    end
  end

  def server_start
    if not @server
      @server = Server.new
      @server.start
    end
  end
  
  def server_stop
    if @server
      @server.stop
      @server = nil
    end
  end

  def irc_receive(msg, cmd)
    @known_irc_targets[msg.target.object_id] = msg.target
    @known_irc_targets[msg.user.object_id] = msg.user
    @server.send msg.target, msg.user, cmd
  end

  def irc_send(target_ids, tag, msg)
    if target_ids
      targets = target_ids.map do |tid| @known_irc_targets[tid] end
      targets.compact!
    else
      targets = @bot.channels
    end
    targets.each {|channel| channel.send "[#{tag}] #{msg}"}
  end

  def get_irc_target(id)
    @known_irc_targets[id]
  end

  @bot = Cinch::Bot.new do
    configure do |c|
      c.user = File.basename $0
      c.realname = c.user
      c.nick = IRCNotifyConfig::IRC::NICK
      c.server = IRCNotifyConfig::IRC::SERVER
      c.port = IRCNotifyConfig::IRC::PORT
      c.channels = IRCNotifyConfig::IRC::CHANNELS
    end
    on :connect do
      self.bot.on :channel, /^#{self.bot.nick}(?:[:, ] *(.*)|$)/ do |m, cmd|
        IRCNotify.irc_receive m, cmd
      end
      IRCNotify.server_start
    end
    on :disconnect do
      IRCNotify.server_stop
    end
    if IRCNotifyConfig::IRC::CMDPREFIX
      on :channel, /^#{IRCNotifyConfig::IRC::CMDPREFIX} *(.*)/ do |m, cmd|
        IRCNotify.irc_receive m, cmd
      end
    end
    on :private do |m|
      if m.command == "PRIVMSG" && m.user
        IRCNotify.irc_receive m, m.message
      end
    end
  end

  def start
    @bot.start
  end
  def info(msg)
    @bot.info msg
  end
  def debug(msg)
    @bot.debug msg
  end
end

IRCNotify.start
