#!/usr/bin/env ruby

require 'cinch'
require 'socket'
require 'json'
require 'etc'

module IRCNotify
  extend self

  VERSION = %x{cd #{File.dirname $0} && git describe --dirty=-modified}.strip
  HOST = Socket.gethostbyname(Socket.gethostname).first
  @server = nil

  config = ARGV.shift || File.join(File.dirname($0), "..", "etc", "config")
  if not File.exists? config
    puts "Can't find config file #{config}"
    puts "Either create it or specify another config file with: #{File.basename $0} [filename]"
    exit
  end
  load config
  load File.join(File.dirname($0), "..", "share", "config.schema")

  class Server
    def initialize
      if File.socket? IRCNotifyConfig::Server::PATH then File.delete IRCNotifyConfig::Server::PATH end
      @server = UNIXServer.new IRCNotifyConfig::Server::PATH
      @clients = []
    end
    def start 
      while socket = @server.accept do
        client = IRCNotify::Client.new socket
        Thread.new do
          @clients << client
          client.start_read
          @clients.delete client
        end
      end
    end
    def stop
      path = @server.path
      @server.shutdown
      @server = nil
      File.delete path
    end
    def write msg
      @clients.each do |c| c.write msg end
    end
    def path
      @server.path
    end
  end

  class Client
    def initialize(socket)
      @socket = socket
      @eid = Etc.getpwuid(@socket.getpeereid[0]).name
      @id = @eid
      IRCNotify.info "New connection #{@socket} by #{@eid}"
    end
    def start_read
      @socket.each do |line|
        IRCNotify.debug "Client #{@socket} got: #{line.strip}"
        cmds = {}
        if line.start_with? "{"
          begin
            cmds = JSON::parse line
          rescue JSON::ParserError => error
            IRCNotify.debug "Could not parse presumed JSON string: #{line}"
            IRCNotify.debug "got error #{error}"
            cmds = {}
          end
        else
          cmds['msg'] = line.strip
        end
        handle_commands cmds
      end
      IRCNotify.info "Ending connection #{@socket}"
      @socket = nil
    end
    def write msg
      @socket.write msg + "\r\n"
    end
    def handle_commands(cmds)
      if cmds['id'] then @id = cmds['id'] end
      if cmds['msg'] then IRCNotify.irc_send @id, cmds['msg'] end
    end
  end

  def server_start
    if not @server
      @server = Server.new
      @server.start
    end
  end
  
  def server_stop
    if @server
      @server.stop
      @server = nil
    end
  end

  def irc_receive(msg, query)
    if query == ""
      msg.reply "ircnotify #{VERSION} listening on #{HOST}:#{@server.path}"
    else
      @server.write query
    end
  end

  def irc_send(id, msg)
    @bot.channels.each {|channel| channel.send "[#{id}] #{msg}"}
  end

  @bot = Cinch::Bot.new do
    configure do |c|
      c.user = File.basename $0
      c.realname = c.user
      c.nick = IRCNotifyConfig::IRC::NICK
      c.server = IRCNotifyConfig::IRC::SERVER
      c.port = IRCNotifyConfig::IRC::PORT
      c.channels = IRCNotifyConfig::IRC::CHANNELS
    end
    on :connect do
      self.bot.on :channel, /^#{self.bot.nick}(?:[:, ] *(.*)|$)/ do |m, cmd|
        IRCNotify.irc_receive m, cmd
      end
      IRCNotify.server_start
    end
    on :disconnect do
      IRCNotify.server_stop
    end
    if IRCNotifyConfig::IRC::CMDPREFIX
      on :channel, /^#{IRCNotifyConfig::IRC::CMDPREFIX} *(.*)/ do |m, cmd|
        IRCNotify.irc_receive m, cmd
      end
    end
    on :private do |m|
      if m.command == "PRIVMSG" && m.user
        IRCNotify.irc_receive m, m.message
      end
    end
  end

  def start
    @bot.start
  end
  def info(msg)
    @bot.info msg
  end
  def debug(msg)
    @bot.debug msg
  end
end

IRCNotify.start
