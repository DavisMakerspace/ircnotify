#!/usr/bin/env ruby

require 'cinch'
require 'socket'
require 'json'
require 'etc'

module IRCNotify
  extend self

  VERSION = %x{cd #{File.dirname($0)} && git describe --dirty=-modified}.strip
  @server = nil

  config = ARGV.shift || File.join(File.dirname($0), "..", "etc", "config")
  if not File.exists? config
    puts "Can't find config file #{config}"
    puts "Either create it or specify another config file with: #{File.basename $0} [filename]"
    exit
  end
  load config
  load File.join(File.dirname($0), "..", "share", "config.schema")

  def server_loop
    if File.socket?(IRCNotifyConfig::Server::PATH) then File.delete(IRCNotifyConfig::Server::PATH) end
    @server =  UNIXServer.new(IRCNotifyConfig::Server::PATH)
    while a = @server.accept do
      Thread.new do
        @bot.info "New connection #{a}"
        eid = Etc.getpwuid(a.getpeereid[0]).name
        id = eid
        a.each do |line|
          @bot.debug "Server got: #{line.strip}"
          msg = nil
          if line.start_with? "{"
            begin
              cmd = JSON::parse(line)
            rescue JSON::ParserError => error
              debug "Could not parse presumed JSON string: #{line}"
              debug "got error #{error}"
              cmd = {}
            end
            if cmd['id'] then id = cmd['id'] end
            if cmd['msg'] then msg = cmd['msg'] end
          else
            msg = line.strip
          end
          if msg then @bot.channels.each {|channel| channel.send "[#{id}] #{msg}"} end
        end
        @bot.info "Ending connection #{a}"
      end
    end
  end

  def server_end
    path = @server.path
    @server.shutdown
    @server = nil
    File.delete(path)
  end

  def irc_receive(msg, query)
    msg.reply "ircnotify #{VERSION} listening on #{@server.path}"
  end

  @bot = Cinch::Bot.new do
    configure do |c|
      c.user = File.basename $0
      c.realname = c.user
      c.nick = IRCNotifyConfig::IRC::NICK
      c.server = IRCNotifyConfig::IRC::SERVER
      c.port = IRCNotifyConfig::IRC::PORT
      c.channels = IRCNotifyConfig::IRC::CHANNELS
    end
    on :connect do
      self.bot.on :channel, /^#{self.bot.nick}(?:[:, ] *(.*)|$)/ do |m, q|
        IRCNotify.irc_receive m, q
      end
      IRCNotify.server_loop
    end
    on :disconnect do
      IRCNotify.server_end
    end
    on :private do |m|
      if m.command == "PRIVMSG" && m.user
        IRCNotify.irc_receive m, m.message
      end
    end
  end

  def start
    @bot.start
  end
end

IRCNotify.start
