#!/usr/bin/env ruby

require 'cinch'
require 'socket'
require 'etc'

module IRCNotify
  extend self

  VERSION = %x{cd #{File.dirname($0)} && git describe --dirty=-modified}.strip

  config = ARGV.shift || File.join(File.dirname($0), "..", "etc", "config")
  if not File.exists? config
    puts "Can't find config file #{config}"
    puts "Either create it or specify another config file with: #{File.basename $0} [filename]"
    exit
  end
  load config
  load File.join(File.dirname($0), "..", "share", "config.schema")

  @bot = Cinch::Bot.new do
    configure do |c|
      c.user = File.basename $0
      c.realname = c.user
      c.nick = IRCNotifyConfig::IRC::NICK
      c.server = IRCNotifyConfig::IRC::SERVER
      c.port = IRCNotifyConfig::IRC::PORT
      c.channels = IRCNotifyConfig::IRC::CHANNELS
    end
    helpers do
      def respond(msg, query)
        msg.reply "ircnotify #{VERSION} listening on #{@unixserver.path}"
      end
    end
    on :connect do
      self.bot.on :channel, /^#{self.bot.nick}(?:[:, ] *(.*)|$)/ do |m, q|
        respond m, q
      end
      if File.socket?(IRCNotifyConfig::Socket::PATH) then File.delete(IRCNotifyConfig::Socket::PATH) end
      @unixserver = UNIXServer.new(IRCNotifyConfig::Socket::PATH)
      while a = @unixserver.accept do
        Thread.new do
          name = Etc.getpwuid(a.getpeereid[0]).name
          tag = name
          a.each do |line|
            line.strip!
            c = line.slice! /^!/
            if c == "!" and not line.start_with? "!"
              command, argstr = line.split(" ", 2)
              if command == "tag" then tag = argstr end
            else
              self.bot.channels.each {|c| c.send "[#{tag}] #{line}" }
            end
          end
        end
      end
    end
    on :disconnect do
      path = @unixserver.path
      @unixserver.shutdown
      @unixserver = nil
      File.delete(path)
    end
    on :private do |m|
      if m.command == "PRIVMSG" && m.user
        respond m, m.message
      end
    end
  end

  def start
    @bot.start
  end
end

IRCNotify.start
